// setup.js - Script to generate encrypted configuration
const crypto = require('crypto');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function generatePasswordHash(password) {
    const hash = crypto.createHash('sha256');
    hash.update(password);
    return hash.digest('hex');
}

function encryptApiKey(apiKey, salt) {
    const encrypted = [];
    for (let i = 0; i < apiKey.length; i++) {
        const keyChar = apiKey.charCodeAt(i);
        const saltChar = salt.charCodeAt(i % salt.length);
        encrypted.push(keyChar ^ saltChar);
    }
    return Buffer.from(encrypted).toString('base64');
}

function generateRandomSalt(length = 32) {
    return crypto.randomBytes(length).toString('hex');
}

async function main() {
    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë      üèÜ TBowl Configuration Setup Wizard üèÜ          ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
    console.log('This script will help you set up your secure configuration.\n');

    // Get password
    console.log('Step 1: Set Application Password');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    const password = await question('Enter your app password: ');
    const confirmPassword = await question('Confirm password: ');
    
    if (password !== confirmPassword) {
        console.log('\n‚ùå Passwords do not match. Please try again.');
        rl.close();
        process.exit(1);
    }
    
    if (password.length < 6) {
        console.log('\n‚ö†Ô∏è  Warning: Password is short. Consider using a longer password for better security.');
    }
    
    const passwordHash = await generatePasswordHash(password);
    console.log('‚úì Password hash generated');

    // Get OpenAI API Key
    console.log('\nStep 2: Configure OpenAI API Key');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log('Get your API key from: https://platform.openai.com/api-keys\n');
    const apiKey = await question('Enter your OpenAI API key: ');
    
    if (!apiKey.startsWith('sk-')) {
        console.log('\n‚ö†Ô∏è  Warning: API key should start with "sk-". Please verify it is correct.');
        const proceed = await question('Continue anyway? (yes/no): ');
        if (proceed.toLowerCase() !== 'yes') {
            console.log('Setup cancelled.');
            rl.close();
            process.exit(0);
        }
    }
    
    // Generate salt
    console.log('\nStep 3: Generate Encryption Salt');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    const salt = generateRandomSalt();
    console.log('‚úì Encryption salt generated');

    // Encrypt API key
    console.log('\nStep 4: Encrypt API Key');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    const encryptedKey = encryptApiKey(apiKey, salt);
    console.log('‚úì API key encrypted\n');

    // Generate config file content
    const configContent = `// config.js - Encrypted Configuration
// AUTO-GENERATED by setup.js - Do not manually edit

export const CONFIG = {
    // Password hash (SHA-256)
    PASSWORD_HASH: "${passwordHash}",
    
    // Encrypted OpenAI API Key (Base64 XOR encrypted)
    ENCRYPTED_API_KEY: "${encryptedKey}",
    
    // Encryption salt
    SALT: "${salt}",
    
    // API Configuration
    OPENAI_MODEL: "gpt-3.5-turbo",
    OPENAI_API_URL: "https://api.openai.com/v1/chat/completions"
};

// Decryption function
export function decryptApiKey(encryptedKey, salt) {
    try {
        const encrypted = atob(encryptedKey);
        const decrypted = [];
        for (let i = 0; i < encrypted.length; i++) {
            const encryptedChar = encrypted.charCodeAt(i);
            const saltChar = salt.charCodeAt(i % salt.length);
            decrypted.push(String.fromCharCode(encryptedChar ^ saltChar));
        }
        return decrypted.join('');
    } catch (e) {
        console.error("Decryption failed:", e);
        return null;
    }
}
`;

    // Ensure public directory exists
    const publicDir = path.join(__dirname, 'public');
    if (!fs.existsSync(publicDir)) {
        fs.mkdirSync(publicDir, { recursive: true });
        console.log('‚úì Created public directory');
    }

    // Write to file
    const configPath = path.join(publicDir, 'config.js');
    fs.writeFileSync(configPath, configContent);

    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë              ‚úì Setup Complete! ‚úì                     ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
    
    console.log('üìÑ Configuration saved to: public/config.js\n');
    
    console.log('üîê IMPORTANT SECURITY NOTES:');
    console.log('   ‚Ä¢ Your password: ' + password);
    console.log('   ‚Ä¢ Keep this password safe!');
    console.log('   ‚Ä¢ API key is encrypted in config.js');
    console.log('   ‚Ä¢ Never commit config.js to public repos');
    console.log('   ‚Ä¢ Add config.js to your .gitignore\n');

    console.log('üìã NEXT STEPS:');
    console.log('   1. Run: npm start');
    console.log('   2. Open: http://localhost:3000');
    console.log('   3. Login with your password');
    console.log('   4. Start analyzing stocks!\n');

    console.log('üìö For deployment instructions, see README.md\n');

    rl.close();
}

main().catch(error => {
    console.error('\n‚ùå Setup failed:', error.message);
    rl.close();
    process.exit(1);
});